// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: disheap.proto

package disheapv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Disheap_MakeHeap_FullMethodName         = "/disheap.v1.Disheap/MakeHeap"
	Disheap_DeleteHeap_FullMethodName       = "/disheap.v1.Disheap/DeleteHeap"
	Disheap_UpdateHeapConfig_FullMethodName = "/disheap.v1.Disheap/UpdateHeapConfig"
	Disheap_ListHeaps_FullMethodName        = "/disheap.v1.Disheap/ListHeaps"
	Disheap_Stats_FullMethodName            = "/disheap.v1.Disheap/Stats"
	Disheap_Purge_FullMethodName            = "/disheap.v1.Disheap/Purge"
	Disheap_MoveToDLQ_FullMethodName        = "/disheap.v1.Disheap/MoveToDLQ"
	Disheap_Enqueue_FullMethodName          = "/disheap.v1.Disheap/Enqueue"
	Disheap_EnqueueBatch_FullMethodName     = "/disheap.v1.Disheap/EnqueueBatch"
	Disheap_PopStream_FullMethodName        = "/disheap.v1.Disheap/PopStream"
	Disheap_Ack_FullMethodName              = "/disheap.v1.Disheap/Ack"
	Disheap_Nack_FullMethodName             = "/disheap.v1.Disheap/Nack"
	Disheap_Extend_FullMethodName           = "/disheap.v1.Disheap/Extend"
	Disheap_Peek_FullMethodName             = "/disheap.v1.Disheap/Peek"
)

// DisheapClient is the client API for Disheap service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DisheapClient interface {
	// Admin operations
	MakeHeap(ctx context.Context, in *MakeHeapReq, opts ...grpc.CallOption) (*MakeHeapResp, error)
	DeleteHeap(ctx context.Context, in *DeleteHeapReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateHeapConfig(ctx context.Context, in *UpdateHeapConfigReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListHeaps(ctx context.Context, in *ListHeapsReq, opts ...grpc.CallOption) (*ListHeapsResp, error)
	Stats(ctx context.Context, in *StatsReq, opts ...grpc.CallOption) (*StatsResp, error)
	Purge(ctx context.Context, in *PurgeReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MoveToDLQ(ctx context.Context, in *MoveToDlqReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Data operations
	Enqueue(ctx context.Context, in *EnqueueReq, opts ...grpc.CallOption) (*EnqueueResp, error)
	EnqueueBatch(ctx context.Context, in *EnqueueBatchReq, opts ...grpc.CallOption) (*EnqueueBatchResp, error)
	PopStream(ctx context.Context, opts ...grpc.CallOption) (Disheap_PopStreamClient, error)
	Ack(ctx context.Context, in *AckReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Nack(ctx context.Context, in *NackReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Extend(ctx context.Context, in *ExtendReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Peek(ctx context.Context, in *PeekReq, opts ...grpc.CallOption) (*PeekResp, error)
}

type disheapClient struct {
	cc grpc.ClientConnInterface
}

func NewDisheapClient(cc grpc.ClientConnInterface) DisheapClient {
	return &disheapClient{cc}
}

func (c *disheapClient) MakeHeap(ctx context.Context, in *MakeHeapReq, opts ...grpc.CallOption) (*MakeHeapResp, error) {
	out := new(MakeHeapResp)
	err := c.cc.Invoke(ctx, Disheap_MakeHeap_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disheapClient) DeleteHeap(ctx context.Context, in *DeleteHeapReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Disheap_DeleteHeap_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disheapClient) UpdateHeapConfig(ctx context.Context, in *UpdateHeapConfigReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Disheap_UpdateHeapConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disheapClient) ListHeaps(ctx context.Context, in *ListHeapsReq, opts ...grpc.CallOption) (*ListHeapsResp, error) {
	out := new(ListHeapsResp)
	err := c.cc.Invoke(ctx, Disheap_ListHeaps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disheapClient) Stats(ctx context.Context, in *StatsReq, opts ...grpc.CallOption) (*StatsResp, error) {
	out := new(StatsResp)
	err := c.cc.Invoke(ctx, Disheap_Stats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disheapClient) Purge(ctx context.Context, in *PurgeReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Disheap_Purge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disheapClient) MoveToDLQ(ctx context.Context, in *MoveToDlqReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Disheap_MoveToDLQ_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disheapClient) Enqueue(ctx context.Context, in *EnqueueReq, opts ...grpc.CallOption) (*EnqueueResp, error) {
	out := new(EnqueueResp)
	err := c.cc.Invoke(ctx, Disheap_Enqueue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disheapClient) EnqueueBatch(ctx context.Context, in *EnqueueBatchReq, opts ...grpc.CallOption) (*EnqueueBatchResp, error) {
	out := new(EnqueueBatchResp)
	err := c.cc.Invoke(ctx, Disheap_EnqueueBatch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disheapClient) PopStream(ctx context.Context, opts ...grpc.CallOption) (Disheap_PopStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Disheap_ServiceDesc.Streams[0], Disheap_PopStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &disheapPopStreamClient{stream}
	return x, nil
}

type Disheap_PopStreamClient interface {
	Send(*PopOpen) error
	Recv() (*PopItem, error)
	grpc.ClientStream
}

type disheapPopStreamClient struct {
	grpc.ClientStream
}

func (x *disheapPopStreamClient) Send(m *PopOpen) error {
	return x.ClientStream.SendMsg(m)
}

func (x *disheapPopStreamClient) Recv() (*PopItem, error) {
	m := new(PopItem)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *disheapClient) Ack(ctx context.Context, in *AckReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Disheap_Ack_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disheapClient) Nack(ctx context.Context, in *NackReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Disheap_Nack_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disheapClient) Extend(ctx context.Context, in *ExtendReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Disheap_Extend_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disheapClient) Peek(ctx context.Context, in *PeekReq, opts ...grpc.CallOption) (*PeekResp, error) {
	out := new(PeekResp)
	err := c.cc.Invoke(ctx, Disheap_Peek_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DisheapServer is the server API for Disheap service.
// All implementations must embed UnimplementedDisheapServer
// for forward compatibility
type DisheapServer interface {
	// Admin operations
	MakeHeap(context.Context, *MakeHeapReq) (*MakeHeapResp, error)
	DeleteHeap(context.Context, *DeleteHeapReq) (*emptypb.Empty, error)
	UpdateHeapConfig(context.Context, *UpdateHeapConfigReq) (*emptypb.Empty, error)
	ListHeaps(context.Context, *ListHeapsReq) (*ListHeapsResp, error)
	Stats(context.Context, *StatsReq) (*StatsResp, error)
	Purge(context.Context, *PurgeReq) (*emptypb.Empty, error)
	MoveToDLQ(context.Context, *MoveToDlqReq) (*emptypb.Empty, error)
	// Data operations
	Enqueue(context.Context, *EnqueueReq) (*EnqueueResp, error)
	EnqueueBatch(context.Context, *EnqueueBatchReq) (*EnqueueBatchResp, error)
	PopStream(Disheap_PopStreamServer) error
	Ack(context.Context, *AckReq) (*emptypb.Empty, error)
	Nack(context.Context, *NackReq) (*emptypb.Empty, error)
	Extend(context.Context, *ExtendReq) (*emptypb.Empty, error)
	Peek(context.Context, *PeekReq) (*PeekResp, error)
	mustEmbedUnimplementedDisheapServer()
}

// UnimplementedDisheapServer must be embedded to have forward compatible implementations.
type UnimplementedDisheapServer struct {
}

func (UnimplementedDisheapServer) MakeHeap(context.Context, *MakeHeapReq) (*MakeHeapResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeHeap not implemented")
}
func (UnimplementedDisheapServer) DeleteHeap(context.Context, *DeleteHeapReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHeap not implemented")
}
func (UnimplementedDisheapServer) UpdateHeapConfig(context.Context, *UpdateHeapConfigReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHeapConfig not implemented")
}
func (UnimplementedDisheapServer) ListHeaps(context.Context, *ListHeapsReq) (*ListHeapsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHeaps not implemented")
}
func (UnimplementedDisheapServer) Stats(context.Context, *StatsReq) (*StatsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stats not implemented")
}
func (UnimplementedDisheapServer) Purge(context.Context, *PurgeReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Purge not implemented")
}
func (UnimplementedDisheapServer) MoveToDLQ(context.Context, *MoveToDlqReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveToDLQ not implemented")
}
func (UnimplementedDisheapServer) Enqueue(context.Context, *EnqueueReq) (*EnqueueResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enqueue not implemented")
}
func (UnimplementedDisheapServer) EnqueueBatch(context.Context, *EnqueueBatchReq) (*EnqueueBatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnqueueBatch not implemented")
}
func (UnimplementedDisheapServer) PopStream(Disheap_PopStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method PopStream not implemented")
}
func (UnimplementedDisheapServer) Ack(context.Context, *AckReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ack not implemented")
}
func (UnimplementedDisheapServer) Nack(context.Context, *NackReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Nack not implemented")
}
func (UnimplementedDisheapServer) Extend(context.Context, *ExtendReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Extend not implemented")
}
func (UnimplementedDisheapServer) Peek(context.Context, *PeekReq) (*PeekResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Peek not implemented")
}
func (UnimplementedDisheapServer) mustEmbedUnimplementedDisheapServer() {}

// UnsafeDisheapServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DisheapServer will
// result in compilation errors.
type UnsafeDisheapServer interface {
	mustEmbedUnimplementedDisheapServer()
}

func RegisterDisheapServer(s grpc.ServiceRegistrar, srv DisheapServer) {
	s.RegisterService(&Disheap_ServiceDesc, srv)
}

func _Disheap_MakeHeap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeHeapReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisheapServer).MakeHeap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Disheap_MakeHeap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisheapServer).MakeHeap(ctx, req.(*MakeHeapReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Disheap_DeleteHeap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHeapReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisheapServer).DeleteHeap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Disheap_DeleteHeap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisheapServer).DeleteHeap(ctx, req.(*DeleteHeapReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Disheap_UpdateHeapConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHeapConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisheapServer).UpdateHeapConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Disheap_UpdateHeapConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisheapServer).UpdateHeapConfig(ctx, req.(*UpdateHeapConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Disheap_ListHeaps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHeapsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisheapServer).ListHeaps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Disheap_ListHeaps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisheapServer).ListHeaps(ctx, req.(*ListHeapsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Disheap_Stats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisheapServer).Stats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Disheap_Stats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisheapServer).Stats(ctx, req.(*StatsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Disheap_Purge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurgeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisheapServer).Purge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Disheap_Purge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisheapServer).Purge(ctx, req.(*PurgeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Disheap_MoveToDLQ_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveToDlqReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisheapServer).MoveToDLQ(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Disheap_MoveToDLQ_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisheapServer).MoveToDLQ(ctx, req.(*MoveToDlqReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Disheap_Enqueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnqueueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisheapServer).Enqueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Disheap_Enqueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisheapServer).Enqueue(ctx, req.(*EnqueueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Disheap_EnqueueBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnqueueBatchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisheapServer).EnqueueBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Disheap_EnqueueBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisheapServer).EnqueueBatch(ctx, req.(*EnqueueBatchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Disheap_PopStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DisheapServer).PopStream(&disheapPopStreamServer{stream})
}

type Disheap_PopStreamServer interface {
	Send(*PopItem) error
	Recv() (*PopOpen, error)
	grpc.ServerStream
}

type disheapPopStreamServer struct {
	grpc.ServerStream
}

func (x *disheapPopStreamServer) Send(m *PopItem) error {
	return x.ServerStream.SendMsg(m)
}

func (x *disheapPopStreamServer) Recv() (*PopOpen, error) {
	m := new(PopOpen)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Disheap_Ack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AckReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisheapServer).Ack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Disheap_Ack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisheapServer).Ack(ctx, req.(*AckReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Disheap_Nack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisheapServer).Nack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Disheap_Nack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisheapServer).Nack(ctx, req.(*NackReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Disheap_Extend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisheapServer).Extend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Disheap_Extend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisheapServer).Extend(ctx, req.(*ExtendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Disheap_Peek_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeekReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisheapServer).Peek(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Disheap_Peek_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisheapServer).Peek(ctx, req.(*PeekReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Disheap_ServiceDesc is the grpc.ServiceDesc for Disheap service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Disheap_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "disheap.v1.Disheap",
	HandlerType: (*DisheapServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MakeHeap",
			Handler:    _Disheap_MakeHeap_Handler,
		},
		{
			MethodName: "DeleteHeap",
			Handler:    _Disheap_DeleteHeap_Handler,
		},
		{
			MethodName: "UpdateHeapConfig",
			Handler:    _Disheap_UpdateHeapConfig_Handler,
		},
		{
			MethodName: "ListHeaps",
			Handler:    _Disheap_ListHeaps_Handler,
		},
		{
			MethodName: "Stats",
			Handler:    _Disheap_Stats_Handler,
		},
		{
			MethodName: "Purge",
			Handler:    _Disheap_Purge_Handler,
		},
		{
			MethodName: "MoveToDLQ",
			Handler:    _Disheap_MoveToDLQ_Handler,
		},
		{
			MethodName: "Enqueue",
			Handler:    _Disheap_Enqueue_Handler,
		},
		{
			MethodName: "EnqueueBatch",
			Handler:    _Disheap_EnqueueBatch_Handler,
		},
		{
			MethodName: "Ack",
			Handler:    _Disheap_Ack_Handler,
		},
		{
			MethodName: "Nack",
			Handler:    _Disheap_Nack_Handler,
		},
		{
			MethodName: "Extend",
			Handler:    _Disheap_Extend_Handler,
		},
		{
			MethodName: "Peek",
			Handler:    _Disheap_Peek_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PopStream",
			Handler:       _Disheap_PopStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "disheap.proto",
}
