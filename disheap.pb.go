// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: disheap.proto

package disheapv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Heap mode enumeration
type Mode int32

const (
	Mode_MIN Mode = 0
	Mode_MAX Mode = 1
)

// Enum value maps for Mode.
var (
	Mode_name = map[int32]string{
		0: "MIN",
		1: "MAX",
	}
	Mode_value = map[string]int32{
		"MIN": 0,
		"MAX": 1,
	}
)

func (x Mode) Enum() *Mode {
	p := new(Mode)
	*p = x
	return p
}

func (x Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_disheap_proto_enumTypes[0].Descriptor()
}

func (Mode) Type() protoreflect.EnumType {
	return &file_disheap_proto_enumTypes[0]
}

func (x Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Mode.Descriptor instead.
func (Mode) EnumDescriptor() ([]byte, []int) {
	return file_disheap_proto_rawDescGZIP(), []int{0}
}

// Make heap request
type MakeHeapReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic                    string               `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Mode                     Mode                 `protobuf:"varint,2,opt,name=mode,proto3,enum=disheap.v1.Mode" json:"mode,omitempty"`
	Partitions               uint32               `protobuf:"varint,3,opt,name=partitions,proto3" json:"partitions,omitempty"`
	ReplicationFactor        uint32               `protobuf:"varint,4,opt,name=replication_factor,json=replicationFactor,proto3" json:"replication_factor,omitempty"`
	TopKBound                uint32               `protobuf:"varint,5,opt,name=top_k_bound,json=topKBound,proto3" json:"top_k_bound,omitempty"`
	RetentionTime            *durationpb.Duration `protobuf:"bytes,6,opt,name=retention_time,json=retentionTime,proto3" json:"retention_time,omitempty"`
	VisibilityTimeoutDefault *durationpb.Duration `protobuf:"bytes,7,opt,name=visibility_timeout_default,json=visibilityTimeoutDefault,proto3" json:"visibility_timeout_default,omitempty"`
	MaxRetriesDefault        uint32               `protobuf:"varint,8,opt,name=max_retries_default,json=maxRetriesDefault,proto3" json:"max_retries_default,omitempty"`
	MaxPayloadBytes          uint64               `protobuf:"varint,9,opt,name=max_payload_bytes,json=maxPayloadBytes,proto3" json:"max_payload_bytes,omitempty"`
	CompressionEnabled       bool                 `protobuf:"varint,10,opt,name=compression_enabled,json=compressionEnabled,proto3" json:"compression_enabled,omitempty"`
	DlqPolicy                *DLQPolicy           `protobuf:"bytes,11,opt,name=dlq_policy,json=dlqPolicy,proto3" json:"dlq_policy,omitempty"`
}

func (x *MakeHeapReq) Reset() {
	*x = MakeHeapReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disheap_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MakeHeapReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MakeHeapReq) ProtoMessage() {}

func (x *MakeHeapReq) ProtoReflect() protoreflect.Message {
	mi := &file_disheap_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MakeHeapReq.ProtoReflect.Descriptor instead.
func (*MakeHeapReq) Descriptor() ([]byte, []int) {
	return file_disheap_proto_rawDescGZIP(), []int{0}
}

func (x *MakeHeapReq) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *MakeHeapReq) GetMode() Mode {
	if x != nil {
		return x.Mode
	}
	return Mode_MIN
}

func (x *MakeHeapReq) GetPartitions() uint32 {
	if x != nil {
		return x.Partitions
	}
	return 0
}

func (x *MakeHeapReq) GetReplicationFactor() uint32 {
	if x != nil {
		return x.ReplicationFactor
	}
	return 0
}

func (x *MakeHeapReq) GetTopKBound() uint32 {
	if x != nil {
		return x.TopKBound
	}
	return 0
}

func (x *MakeHeapReq) GetRetentionTime() *durationpb.Duration {
	if x != nil {
		return x.RetentionTime
	}
	return nil
}

func (x *MakeHeapReq) GetVisibilityTimeoutDefault() *durationpb.Duration {
	if x != nil {
		return x.VisibilityTimeoutDefault
	}
	return nil
}

func (x *MakeHeapReq) GetMaxRetriesDefault() uint32 {
	if x != nil {
		return x.MaxRetriesDefault
	}
	return 0
}

func (x *MakeHeapReq) GetMaxPayloadBytes() uint64 {
	if x != nil {
		return x.MaxPayloadBytes
	}
	return 0
}

func (x *MakeHeapReq) GetCompressionEnabled() bool {
	if x != nil {
		return x.CompressionEnabled
	}
	return false
}

func (x *MakeHeapReq) GetDlqPolicy() *DLQPolicy {
	if x != nil {
		return x.DlqPolicy
	}
	return nil
}

// Make heap response
type MakeHeapResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic  string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	HeapId string `protobuf:"bytes,2,opt,name=heap_id,json=heapId,proto3" json:"heap_id,omitempty"`
}

func (x *MakeHeapResp) Reset() {
	*x = MakeHeapResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disheap_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MakeHeapResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MakeHeapResp) ProtoMessage() {}

func (x *MakeHeapResp) ProtoReflect() protoreflect.Message {
	mi := &file_disheap_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MakeHeapResp.ProtoReflect.Descriptor instead.
func (*MakeHeapResp) Descriptor() ([]byte, []int) {
	return file_disheap_proto_rawDescGZIP(), []int{1}
}

func (x *MakeHeapResp) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *MakeHeapResp) GetHeapId() string {
	if x != nil {
		return x.HeapId
	}
	return ""
}

// Delete heap request
type DeleteHeapReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic             string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Force             bool   `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
	ConfirmationToken string `protobuf:"bytes,3,opt,name=confirmation_token,json=confirmationToken,proto3" json:"confirmation_token,omitempty"`
}

func (x *DeleteHeapReq) Reset() {
	*x = DeleteHeapReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disheap_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteHeapReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteHeapReq) ProtoMessage() {}

func (x *DeleteHeapReq) ProtoReflect() protoreflect.Message {
	mi := &file_disheap_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteHeapReq.ProtoReflect.Descriptor instead.
func (*DeleteHeapReq) Descriptor() ([]byte, []int) {
	return file_disheap_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteHeapReq) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *DeleteHeapReq) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *DeleteHeapReq) GetConfirmationToken() string {
	if x != nil {
		return x.ConfirmationToken
	}
	return ""
}

// Update heap config request
type UpdateHeapConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic                    string               `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	RetentionTime            *durationpb.Duration `protobuf:"bytes,2,opt,name=retention_time,json=retentionTime,proto3,oneof" json:"retention_time,omitempty"`
	VisibilityTimeoutDefault *durationpb.Duration `protobuf:"bytes,3,opt,name=visibility_timeout_default,json=visibilityTimeoutDefault,proto3,oneof" json:"visibility_timeout_default,omitempty"`
	MaxRetriesDefault        *uint32              `protobuf:"varint,4,opt,name=max_retries_default,json=maxRetriesDefault,proto3,oneof" json:"max_retries_default,omitempty"`
	MaxPayloadBytes          *uint64              `protobuf:"varint,5,opt,name=max_payload_bytes,json=maxPayloadBytes,proto3,oneof" json:"max_payload_bytes,omitempty"`
	CompressionEnabled       *bool                `protobuf:"varint,6,opt,name=compression_enabled,json=compressionEnabled,proto3,oneof" json:"compression_enabled,omitempty"`
	DlqPolicy                *DLQPolicy           `protobuf:"bytes,7,opt,name=dlq_policy,json=dlqPolicy,proto3,oneof" json:"dlq_policy,omitempty"`
}

func (x *UpdateHeapConfigReq) Reset() {
	*x = UpdateHeapConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disheap_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHeapConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHeapConfigReq) ProtoMessage() {}

func (x *UpdateHeapConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_disheap_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHeapConfigReq.ProtoReflect.Descriptor instead.
func (*UpdateHeapConfigReq) Descriptor() ([]byte, []int) {
	return file_disheap_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateHeapConfigReq) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *UpdateHeapConfigReq) GetRetentionTime() *durationpb.Duration {
	if x != nil {
		return x.RetentionTime
	}
	return nil
}

func (x *UpdateHeapConfigReq) GetVisibilityTimeoutDefault() *durationpb.Duration {
	if x != nil {
		return x.VisibilityTimeoutDefault
	}
	return nil
}

func (x *UpdateHeapConfigReq) GetMaxRetriesDefault() uint32 {
	if x != nil && x.MaxRetriesDefault != nil {
		return *x.MaxRetriesDefault
	}
	return 0
}

func (x *UpdateHeapConfigReq) GetMaxPayloadBytes() uint64 {
	if x != nil && x.MaxPayloadBytes != nil {
		return *x.MaxPayloadBytes
	}
	return 0
}

func (x *UpdateHeapConfigReq) GetCompressionEnabled() bool {
	if x != nil && x.CompressionEnabled != nil {
		return *x.CompressionEnabled
	}
	return false
}

func (x *UpdateHeapConfigReq) GetDlqPolicy() *DLQPolicy {
	if x != nil {
		return x.DlqPolicy
	}
	return nil
}

// List heaps request
type ListHeapsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize  uint32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListHeapsReq) Reset() {
	*x = ListHeapsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disheap_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListHeapsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHeapsReq) ProtoMessage() {}

func (x *ListHeapsReq) ProtoReflect() protoreflect.Message {
	mi := &file_disheap_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHeapsReq.ProtoReflect.Descriptor instead.
func (*ListHeapsReq) Descriptor() ([]byte, []int) {
	return file_disheap_proto_rawDescGZIP(), []int{4}
}

func (x *ListHeapsReq) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListHeapsReq) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// List heaps response
type ListHeapsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Heaps         []*HeapInfo `protobuf:"bytes,1,rep,name=heaps,proto3" json:"heaps,omitempty"`
	NextPageToken string      `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListHeapsResp) Reset() {
	*x = ListHeapsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disheap_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListHeapsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHeapsResp) ProtoMessage() {}

func (x *ListHeapsResp) ProtoReflect() protoreflect.Message {
	mi := &file_disheap_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHeapsResp.ProtoReflect.Descriptor instead.
func (*ListHeapsResp) Descriptor() ([]byte, []int) {
	return file_disheap_proto_rawDescGZIP(), []int{5}
}

func (x *ListHeapsResp) GetHeaps() []*HeapInfo {
	if x != nil {
		return x.Heaps
	}
	return nil
}

func (x *ListHeapsResp) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Heap information
type HeapInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic                    string                 `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Mode                     Mode                   `protobuf:"varint,2,opt,name=mode,proto3,enum=disheap.v1.Mode" json:"mode,omitempty"`
	Partitions               uint32                 `protobuf:"varint,3,opt,name=partitions,proto3" json:"partitions,omitempty"`
	ReplicationFactor        uint32                 `protobuf:"varint,4,opt,name=replication_factor,json=replicationFactor,proto3" json:"replication_factor,omitempty"`
	TopKBound                uint32                 `protobuf:"varint,5,opt,name=top_k_bound,json=topKBound,proto3" json:"top_k_bound,omitempty"`
	RetentionTime            *durationpb.Duration   `protobuf:"bytes,6,opt,name=retention_time,json=retentionTime,proto3" json:"retention_time,omitempty"`
	VisibilityTimeoutDefault *durationpb.Duration   `protobuf:"bytes,7,opt,name=visibility_timeout_default,json=visibilityTimeoutDefault,proto3" json:"visibility_timeout_default,omitempty"`
	MaxRetriesDefault        uint32                 `protobuf:"varint,8,opt,name=max_retries_default,json=maxRetriesDefault,proto3" json:"max_retries_default,omitempty"`
	MaxPayloadBytes          uint64                 `protobuf:"varint,9,opt,name=max_payload_bytes,json=maxPayloadBytes,proto3" json:"max_payload_bytes,omitempty"`
	CompressionEnabled       bool                   `protobuf:"varint,10,opt,name=compression_enabled,json=compressionEnabled,proto3" json:"compression_enabled,omitempty"`
	DlqPolicy                *DLQPolicy             `protobuf:"bytes,11,opt,name=dlq_policy,json=dlqPolicy,proto3" json:"dlq_policy,omitempty"`
	CreatedAt                *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt                *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Stats                    *HeapStats             `protobuf:"bytes,14,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *HeapInfo) Reset() {
	*x = HeapInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disheap_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeapInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeapInfo) ProtoMessage() {}

func (x *HeapInfo) ProtoReflect() protoreflect.Message {
	mi := &file_disheap_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeapInfo.ProtoReflect.Descriptor instead.
func (*HeapInfo) Descriptor() ([]byte, []int) {
	return file_disheap_proto_rawDescGZIP(), []int{6}
}

func (x *HeapInfo) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *HeapInfo) GetMode() Mode {
	if x != nil {
		return x.Mode
	}
	return Mode_MIN
}

func (x *HeapInfo) GetPartitions() uint32 {
	if x != nil {
		return x.Partitions
	}
	return 0
}

func (x *HeapInfo) GetReplicationFactor() uint32 {
	if x != nil {
		return x.ReplicationFactor
	}
	return 0
}

func (x *HeapInfo) GetTopKBound() uint32 {
	if x != nil {
		return x.TopKBound
	}
	return 0
}

func (x *HeapInfo) GetRetentionTime() *durationpb.Duration {
	if x != nil {
		return x.RetentionTime
	}
	return nil
}

func (x *HeapInfo) GetVisibilityTimeoutDefault() *durationpb.Duration {
	if x != nil {
		return x.VisibilityTimeoutDefault
	}
	return nil
}

func (x *HeapInfo) GetMaxRetriesDefault() uint32 {
	if x != nil {
		return x.MaxRetriesDefault
	}
	return 0
}

func (x *HeapInfo) GetMaxPayloadBytes() uint64 {
	if x != nil {
		return x.MaxPayloadBytes
	}
	return 0
}

func (x *HeapInfo) GetCompressionEnabled() bool {
	if x != nil {
		return x.CompressionEnabled
	}
	return false
}

func (x *HeapInfo) GetDlqPolicy() *DLQPolicy {
	if x != nil {
		return x.DlqPolicy
	}
	return nil
}

func (x *HeapInfo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *HeapInfo) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *HeapInfo) GetStats() *HeapStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

// DLQ Policy
type DLQPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled       bool                 `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	RetentionTime *durationpb.Duration `protobuf:"bytes,2,opt,name=retention_time,json=retentionTime,proto3" json:"retention_time,omitempty"`
}

func (x *DLQPolicy) Reset() {
	*x = DLQPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disheap_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DLQPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DLQPolicy) ProtoMessage() {}

func (x *DLQPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_disheap_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DLQPolicy.ProtoReflect.Descriptor instead.
func (*DLQPolicy) Descriptor() ([]byte, []int) {
	return file_disheap_proto_rawDescGZIP(), []int{7}
}

func (x *DLQPolicy) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *DLQPolicy) GetRetentionTime() *durationpb.Duration {
	if x != nil {
		return x.RetentionTime
	}
	return nil
}

// Heap statistics
type HeapStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalMessages    uint64                     `protobuf:"varint,1,opt,name=total_messages,json=totalMessages,proto3" json:"total_messages,omitempty"`
	InflightMessages uint64                     `protobuf:"varint,2,opt,name=inflight_messages,json=inflightMessages,proto3" json:"inflight_messages,omitempty"`
	DlqMessages      uint64                     `protobuf:"varint,3,opt,name=dlq_messages,json=dlqMessages,proto3" json:"dlq_messages,omitempty"`
	TotalEnqueues    uint64                     `protobuf:"varint,4,opt,name=total_enqueues,json=totalEnqueues,proto3" json:"total_enqueues,omitempty"`
	TotalPops        uint64                     `protobuf:"varint,5,opt,name=total_pops,json=totalPops,proto3" json:"total_pops,omitempty"`
	TotalAcks        uint64                     `protobuf:"varint,6,opt,name=total_acks,json=totalAcks,proto3" json:"total_acks,omitempty"`
	TotalNacks       uint64                     `protobuf:"varint,7,opt,name=total_nacks,json=totalNacks,proto3" json:"total_nacks,omitempty"`
	TotalRetries     uint64                     `protobuf:"varint,8,opt,name=total_retries,json=totalRetries,proto3" json:"total_retries,omitempty"`
	TotalTimeouts    uint64                     `protobuf:"varint,9,opt,name=total_timeouts,json=totalTimeouts,proto3" json:"total_timeouts,omitempty"`
	PartitionStats   map[uint32]*PartitionStats `protobuf:"bytes,10,rep,name=partition_stats,json=partitionStats,proto3" json:"partition_stats,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *HeapStats) Reset() {
	*x = HeapStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disheap_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeapStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeapStats) ProtoMessage() {}

func (x *HeapStats) ProtoReflect() protoreflect.Message {
	mi := &file_disheap_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeapStats.ProtoReflect.Descriptor instead.
func (*HeapStats) Descriptor() ([]byte, []int) {
	return file_disheap_proto_rawDescGZIP(), []int{8}
}

func (x *HeapStats) GetTotalMessages() uint64 {
	if x != nil {
		return x.TotalMessages
	}
	return 0
}

func (x *HeapStats) GetInflightMessages() uint64 {
	if x != nil {
		return x.InflightMessages
	}
	return 0
}

func (x *HeapStats) GetDlqMessages() uint64 {
	if x != nil {
		return x.DlqMessages
	}
	return 0
}

func (x *HeapStats) GetTotalEnqueues() uint64 {
	if x != nil {
		return x.TotalEnqueues
	}
	return 0
}

func (x *HeapStats) GetTotalPops() uint64 {
	if x != nil {
		return x.TotalPops
	}
	return 0
}

func (x *HeapStats) GetTotalAcks() uint64 {
	if x != nil {
		return x.TotalAcks
	}
	return 0
}

func (x *HeapStats) GetTotalNacks() uint64 {
	if x != nil {
		return x.TotalNacks
	}
	return 0
}

func (x *HeapStats) GetTotalRetries() uint64 {
	if x != nil {
		return x.TotalRetries
	}
	return 0
}

func (x *HeapStats) GetTotalTimeouts() uint64 {
	if x != nil {
		return x.TotalTimeouts
	}
	return 0
}

func (x *HeapStats) GetPartitionStats() map[uint32]*PartitionStats {
	if x != nil {
		return x.PartitionStats
	}
	return nil
}

// Partition statistics
type PartitionStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartitionId  uint32   `protobuf:"varint,1,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
	Messages     uint64   `protobuf:"varint,2,opt,name=messages,proto3" json:"messages,omitempty"`
	Inflight     uint64   `protobuf:"varint,3,opt,name=inflight,proto3" json:"inflight,omitempty"`
	LeaderNode   string   `protobuf:"bytes,4,opt,name=leader_node,json=leaderNode,proto3" json:"leader_node,omitempty"`
	ReplicaNodes []string `protobuf:"bytes,5,rep,name=replica_nodes,json=replicaNodes,proto3" json:"replica_nodes,omitempty"`
	IsHealthy    bool     `protobuf:"varint,6,opt,name=is_healthy,json=isHealthy,proto3" json:"is_healthy,omitempty"`
}

func (x *PartitionStats) Reset() {
	*x = PartitionStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disheap_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionStats) ProtoMessage() {}

func (x *PartitionStats) ProtoReflect() protoreflect.Message {
	mi := &file_disheap_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionStats.ProtoReflect.Descriptor instead.
func (*PartitionStats) Descriptor() ([]byte, []int) {
	return file_disheap_proto_rawDescGZIP(), []int{9}
}

func (x *PartitionStats) GetPartitionId() uint32 {
	if x != nil {
		return x.PartitionId
	}
	return 0
}

func (x *PartitionStats) GetMessages() uint64 {
	if x != nil {
		return x.Messages
	}
	return 0
}

func (x *PartitionStats) GetInflight() uint64 {
	if x != nil {
		return x.Inflight
	}
	return 0
}

func (x *PartitionStats) GetLeaderNode() string {
	if x != nil {
		return x.LeaderNode
	}
	return ""
}

func (x *PartitionStats) GetReplicaNodes() []string {
	if x != nil {
		return x.ReplicaNodes
	}
	return nil
}

func (x *PartitionStats) GetIsHealthy() bool {
	if x != nil {
		return x.IsHealthy
	}
	return false
}

// Stats request
type StatsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic       *string `protobuf:"bytes,1,opt,name=topic,proto3,oneof" json:"topic,omitempty"`
	PartitionId *uint32 `protobuf:"varint,2,opt,name=partition_id,json=partitionId,proto3,oneof" json:"partition_id,omitempty"`
}

func (x *StatsReq) Reset() {
	*x = StatsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disheap_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatsReq) ProtoMessage() {}

func (x *StatsReq) ProtoReflect() protoreflect.Message {
	mi := &file_disheap_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatsReq.ProtoReflect.Descriptor instead.
func (*StatsReq) Descriptor() ([]byte, []int) {
	return file_disheap_proto_rawDescGZIP(), []int{10}
}

func (x *StatsReq) GetTopic() string {
	if x != nil && x.Topic != nil {
		return *x.Topic
	}
	return ""
}

func (x *StatsReq) GetPartitionId() uint32 {
	if x != nil && x.PartitionId != nil {
		return *x.PartitionId
	}
	return 0
}

// Stats response
type StatsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GlobalStats *HeapStats            `protobuf:"bytes,1,opt,name=global_stats,json=globalStats,proto3" json:"global_stats,omitempty"`
	TopicStats  map[string]*HeapStats `protobuf:"bytes,2,rep,name=topic_stats,json=topicStats,proto3" json:"topic_stats,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *StatsResp) Reset() {
	*x = StatsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disheap_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatsResp) ProtoMessage() {}

func (x *StatsResp) ProtoReflect() protoreflect.Message {
	mi := &file_disheap_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatsResp.ProtoReflect.Descriptor instead.
func (*StatsResp) Descriptor() ([]byte, []int) {
	return file_disheap_proto_rawDescGZIP(), []int{11}
}

func (x *StatsResp) GetGlobalStats() *HeapStats {
	if x != nil {
		return x.GlobalStats
	}
	return nil
}

func (x *StatsResp) GetTopicStats() map[string]*HeapStats {
	if x != nil {
		return x.TopicStats
	}
	return nil
}

// Purge request
type PurgeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic             string  `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	PartitionId       *uint32 `protobuf:"varint,2,opt,name=partition_id,json=partitionId,proto3,oneof" json:"partition_id,omitempty"`
	Force             bool    `protobuf:"varint,3,opt,name=force,proto3" json:"force,omitempty"`
	ConfirmationToken string  `protobuf:"bytes,4,opt,name=confirmation_token,json=confirmationToken,proto3" json:"confirmation_token,omitempty"`
}

func (x *PurgeReq) Reset() {
	*x = PurgeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disheap_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurgeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurgeReq) ProtoMessage() {}

func (x *PurgeReq) ProtoReflect() protoreflect.Message {
	mi := &file_disheap_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurgeReq.ProtoReflect.Descriptor instead.
func (*PurgeReq) Descriptor() ([]byte, []int) {
	return file_disheap_proto_rawDescGZIP(), []int{12}
}

func (x *PurgeReq) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *PurgeReq) GetPartitionId() uint32 {
	if x != nil && x.PartitionId != nil {
		return *x.PartitionId
	}
	return 0
}

func (x *PurgeReq) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *PurgeReq) GetConfirmationToken() string {
	if x != nil {
		return x.ConfirmationToken
	}
	return ""
}

// Move to DLQ request
type MoveToDlqReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic     string  `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	MessageId string  `protobuf:"bytes,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	Reason    *string `protobuf:"bytes,3,opt,name=reason,proto3,oneof" json:"reason,omitempty"`
}

func (x *MoveToDlqReq) Reset() {
	*x = MoveToDlqReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disheap_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveToDlqReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveToDlqReq) ProtoMessage() {}

func (x *MoveToDlqReq) ProtoReflect() protoreflect.Message {
	mi := &file_disheap_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveToDlqReq.ProtoReflect.Descriptor instead.
func (*MoveToDlqReq) Descriptor() ([]byte, []int) {
	return file_disheap_proto_rawDescGZIP(), []int{13}
}

func (x *MoveToDlqReq) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *MoveToDlqReq) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *MoveToDlqReq) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

// Enqueue request
type EnqueueReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic        string               `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Payload      []byte               `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	Priority     int64                `protobuf:"varint,3,opt,name=priority,proto3" json:"priority,omitempty"`
	PartitionKey *string              `protobuf:"bytes,4,opt,name=partition_key,json=partitionKey,proto3,oneof" json:"partition_key,omitempty"`
	ProducerId   *string              `protobuf:"bytes,5,opt,name=producer_id,json=producerId,proto3,oneof" json:"producer_id,omitempty"`
	Epoch        *uint64              `protobuf:"varint,6,opt,name=epoch,proto3,oneof" json:"epoch,omitempty"`
	Sequence     *uint64              `protobuf:"varint,7,opt,name=sequence,proto3,oneof" json:"sequence,omitempty"`
	MaxRetries   *uint32              `protobuf:"varint,8,opt,name=max_retries,json=maxRetries,proto3,oneof" json:"max_retries,omitempty"`
	NotBefore    *durationpb.Duration `protobuf:"bytes,9,opt,name=not_before,json=notBefore,proto3,oneof" json:"not_before,omitempty"`
}

func (x *EnqueueReq) Reset() {
	*x = EnqueueReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disheap_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnqueueReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnqueueReq) ProtoMessage() {}

func (x *EnqueueReq) ProtoReflect() protoreflect.Message {
	mi := &file_disheap_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnqueueReq.ProtoReflect.Descriptor instead.
func (*EnqueueReq) Descriptor() ([]byte, []int) {
	return file_disheap_proto_rawDescGZIP(), []int{14}
}

func (x *EnqueueReq) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *EnqueueReq) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *EnqueueReq) GetPriority() int64 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *EnqueueReq) GetPartitionKey() string {
	if x != nil && x.PartitionKey != nil {
		return *x.PartitionKey
	}
	return ""
}

func (x *EnqueueReq) GetProducerId() string {
	if x != nil && x.ProducerId != nil {
		return *x.ProducerId
	}
	return ""
}

func (x *EnqueueReq) GetEpoch() uint64 {
	if x != nil && x.Epoch != nil {
		return *x.Epoch
	}
	return 0
}

func (x *EnqueueReq) GetSequence() uint64 {
	if x != nil && x.Sequence != nil {
		return *x.Sequence
	}
	return 0
}

func (x *EnqueueReq) GetMaxRetries() uint32 {
	if x != nil && x.MaxRetries != nil {
		return *x.MaxRetries
	}
	return 0
}

func (x *EnqueueReq) GetNotBefore() *durationpb.Duration {
	if x != nil {
		return x.NotBefore
	}
	return nil
}

// Enqueue response
type EnqueueResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageId   string `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	Duplicate   bool   `protobuf:"varint,2,opt,name=duplicate,proto3" json:"duplicate,omitempty"`
	PartitionId uint32 `protobuf:"varint,3,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
}

func (x *EnqueueResp) Reset() {
	*x = EnqueueResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disheap_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnqueueResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnqueueResp) ProtoMessage() {}

func (x *EnqueueResp) ProtoReflect() protoreflect.Message {
	mi := &file_disheap_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnqueueResp.ProtoReflect.Descriptor instead.
func (*EnqueueResp) Descriptor() ([]byte, []int) {
	return file_disheap_proto_rawDescGZIP(), []int{15}
}

func (x *EnqueueResp) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *EnqueueResp) GetDuplicate() bool {
	if x != nil {
		return x.Duplicate
	}
	return false
}

func (x *EnqueueResp) GetPartitionId() uint32 {
	if x != nil {
		return x.PartitionId
	}
	return 0
}

// Batch enqueue request
type EnqueueBatchReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requests      []*EnqueueReq `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
	TransactionId *string       `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3,oneof" json:"transaction_id,omitempty"`
}

func (x *EnqueueBatchReq) Reset() {
	*x = EnqueueBatchReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disheap_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnqueueBatchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnqueueBatchReq) ProtoMessage() {}

func (x *EnqueueBatchReq) ProtoReflect() protoreflect.Message {
	mi := &file_disheap_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnqueueBatchReq.ProtoReflect.Descriptor instead.
func (*EnqueueBatchReq) Descriptor() ([]byte, []int) {
	return file_disheap_proto_rawDescGZIP(), []int{16}
}

func (x *EnqueueBatchReq) GetRequests() []*EnqueueReq {
	if x != nil {
		return x.Requests
	}
	return nil
}

func (x *EnqueueBatchReq) GetTransactionId() string {
	if x != nil && x.TransactionId != nil {
		return *x.TransactionId
	}
	return ""
}

// Batch enqueue response
type EnqueueBatchResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Responses     []*EnqueueResp `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
	TransactionId string         `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	AllDuplicates bool           `protobuf:"varint,3,opt,name=all_duplicates,json=allDuplicates,proto3" json:"all_duplicates,omitempty"`
}

func (x *EnqueueBatchResp) Reset() {
	*x = EnqueueBatchResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disheap_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnqueueBatchResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnqueueBatchResp) ProtoMessage() {}

func (x *EnqueueBatchResp) ProtoReflect() protoreflect.Message {
	mi := &file_disheap_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnqueueBatchResp.ProtoReflect.Descriptor instead.
func (*EnqueueBatchResp) Descriptor() ([]byte, []int) {
	return file_disheap_proto_rawDescGZIP(), []int{17}
}

func (x *EnqueueBatchResp) GetResponses() []*EnqueueResp {
	if x != nil {
		return x.Responses
	}
	return nil
}

func (x *EnqueueBatchResp) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *EnqueueBatchResp) GetAllDuplicates() bool {
	if x != nil {
		return x.AllDuplicates
	}
	return false
}

// Pop stream opening message
type PopOpen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Kind:
	//
	//	*PopOpen_FlowControl
	//	*PopOpen_Filter
	Kind isPopOpen_Kind `protobuf_oneof:"kind"`
}

func (x *PopOpen) Reset() {
	*x = PopOpen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disheap_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PopOpen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PopOpen) ProtoMessage() {}

func (x *PopOpen) ProtoReflect() protoreflect.Message {
	mi := &file_disheap_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PopOpen.ProtoReflect.Descriptor instead.
func (*PopOpen) Descriptor() ([]byte, []int) {
	return file_disheap_proto_rawDescGZIP(), []int{18}
}

func (m *PopOpen) GetKind() isPopOpen_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *PopOpen) GetFlowControl() *FlowControl {
	if x, ok := x.GetKind().(*PopOpen_FlowControl); ok {
		return x.FlowControl
	}
	return nil
}

func (x *PopOpen) GetFilter() *PopFilter {
	if x, ok := x.GetKind().(*PopOpen_Filter); ok {
		return x.Filter
	}
	return nil
}

type isPopOpen_Kind interface {
	isPopOpen_Kind()
}

type PopOpen_FlowControl struct {
	FlowControl *FlowControl `protobuf:"bytes,1,opt,name=flow_control,json=flowControl,proto3,oneof"`
}

type PopOpen_Filter struct {
	Filter *PopFilter `protobuf:"bytes,2,opt,name=filter,proto3,oneof"`
}

func (*PopOpen_FlowControl) isPopOpen_Kind() {}

func (*PopOpen_Filter) isPopOpen_Kind() {}

// Flow control message
type FlowControl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Credits uint32 `protobuf:"varint,1,opt,name=credits,proto3" json:"credits,omitempty"`
}

func (x *FlowControl) Reset() {
	*x = FlowControl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disheap_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowControl) ProtoMessage() {}

func (x *FlowControl) ProtoReflect() protoreflect.Message {
	mi := &file_disheap_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowControl.ProtoReflect.Descriptor instead.
func (*FlowControl) Descriptor() ([]byte, []int) {
	return file_disheap_proto_rawDescGZIP(), []int{19}
}

func (x *FlowControl) GetCredits() uint32 {
	if x != nil {
		return x.Credits
	}
	return 0
}

// Pop filter (for topic/partition filtering)
type PopFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic             string               `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	PartitionIds      []uint32             `protobuf:"varint,2,rep,packed,name=partition_ids,json=partitionIds,proto3" json:"partition_ids,omitempty"`
	VisibilityTimeout *durationpb.Duration `protobuf:"bytes,3,opt,name=visibility_timeout,json=visibilityTimeout,proto3,oneof" json:"visibility_timeout,omitempty"`
}

func (x *PopFilter) Reset() {
	*x = PopFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disheap_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PopFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PopFilter) ProtoMessage() {}

func (x *PopFilter) ProtoReflect() protoreflect.Message {
	mi := &file_disheap_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PopFilter.ProtoReflect.Descriptor instead.
func (*PopFilter) Descriptor() ([]byte, []int) {
	return file_disheap_proto_rawDescGZIP(), []int{20}
}

func (x *PopFilter) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *PopFilter) GetPartitionIds() []uint32 {
	if x != nil {
		return x.PartitionIds
	}
	return nil
}

func (x *PopFilter) GetVisibilityTimeout() *durationpb.Duration {
	if x != nil {
		return x.VisibilityTimeout
	}
	return nil
}

// Popped item
type PopItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageId     string                 `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	Topic         string                 `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	PartitionId   uint32                 `protobuf:"varint,3,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
	Payload       []byte                 `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
	Priority      int64                  `protobuf:"varint,5,opt,name=priority,proto3" json:"priority,omitempty"`
	EnqueuedTime  *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=enqueued_time,json=enqueuedTime,proto3" json:"enqueued_time,omitempty"`
	LeaseToken    string                 `protobuf:"bytes,7,opt,name=lease_token,json=leaseToken,proto3" json:"lease_token,omitempty"`
	LeaseDeadline *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=lease_deadline,json=leaseDeadline,proto3" json:"lease_deadline,omitempty"`
	Attempts      uint32                 `protobuf:"varint,9,opt,name=attempts,proto3" json:"attempts,omitempty"`
	MaxRetries    uint32                 `protobuf:"varint,10,opt,name=max_retries,json=maxRetries,proto3" json:"max_retries,omitempty"`
	ProducerId    *string                `protobuf:"bytes,11,opt,name=producer_id,json=producerId,proto3,oneof" json:"producer_id,omitempty"`
	Epoch         *uint64                `protobuf:"varint,12,opt,name=epoch,proto3,oneof" json:"epoch,omitempty"`
	Sequence      *uint64                `protobuf:"varint,13,opt,name=sequence,proto3,oneof" json:"sequence,omitempty"`
}

func (x *PopItem) Reset() {
	*x = PopItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disheap_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PopItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PopItem) ProtoMessage() {}

func (x *PopItem) ProtoReflect() protoreflect.Message {
	mi := &file_disheap_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PopItem.ProtoReflect.Descriptor instead.
func (*PopItem) Descriptor() ([]byte, []int) {
	return file_disheap_proto_rawDescGZIP(), []int{21}
}

func (x *PopItem) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *PopItem) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *PopItem) GetPartitionId() uint32 {
	if x != nil {
		return x.PartitionId
	}
	return 0
}

func (x *PopItem) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *PopItem) GetPriority() int64 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *PopItem) GetEnqueuedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EnqueuedTime
	}
	return nil
}

func (x *PopItem) GetLeaseToken() string {
	if x != nil {
		return x.LeaseToken
	}
	return ""
}

func (x *PopItem) GetLeaseDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.LeaseDeadline
	}
	return nil
}

func (x *PopItem) GetAttempts() uint32 {
	if x != nil {
		return x.Attempts
	}
	return 0
}

func (x *PopItem) GetMaxRetries() uint32 {
	if x != nil {
		return x.MaxRetries
	}
	return 0
}

func (x *PopItem) GetProducerId() string {
	if x != nil && x.ProducerId != nil {
		return *x.ProducerId
	}
	return ""
}

func (x *PopItem) GetEpoch() uint64 {
	if x != nil && x.Epoch != nil {
		return *x.Epoch
	}
	return 0
}

func (x *PopItem) GetSequence() uint64 {
	if x != nil && x.Sequence != nil {
		return *x.Sequence
	}
	return 0
}

// Ack request
type AckReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic      string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	MessageId  string `protobuf:"bytes,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	LeaseToken string `protobuf:"bytes,3,opt,name=lease_token,json=leaseToken,proto3" json:"lease_token,omitempty"`
}

func (x *AckReq) Reset() {
	*x = AckReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disheap_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckReq) ProtoMessage() {}

func (x *AckReq) ProtoReflect() protoreflect.Message {
	mi := &file_disheap_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckReq.ProtoReflect.Descriptor instead.
func (*AckReq) Descriptor() ([]byte, []int) {
	return file_disheap_proto_rawDescGZIP(), []int{22}
}

func (x *AckReq) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *AckReq) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *AckReq) GetLeaseToken() string {
	if x != nil {
		return x.LeaseToken
	}
	return ""
}

// Nack request
type NackReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic           string               `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	MessageId       string               `protobuf:"bytes,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	LeaseToken      string               `protobuf:"bytes,3,opt,name=lease_token,json=leaseToken,proto3" json:"lease_token,omitempty"`
	BackoffOverride *durationpb.Duration `protobuf:"bytes,4,opt,name=backoff_override,json=backoffOverride,proto3,oneof" json:"backoff_override,omitempty"`
	Reason          *string              `protobuf:"bytes,5,opt,name=reason,proto3,oneof" json:"reason,omitempty"`
}

func (x *NackReq) Reset() {
	*x = NackReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disheap_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NackReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NackReq) ProtoMessage() {}

func (x *NackReq) ProtoReflect() protoreflect.Message {
	mi := &file_disheap_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NackReq.ProtoReflect.Descriptor instead.
func (*NackReq) Descriptor() ([]byte, []int) {
	return file_disheap_proto_rawDescGZIP(), []int{23}
}

func (x *NackReq) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *NackReq) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *NackReq) GetLeaseToken() string {
	if x != nil {
		return x.LeaseToken
	}
	return ""
}

func (x *NackReq) GetBackoffOverride() *durationpb.Duration {
	if x != nil {
		return x.BackoffOverride
	}
	return nil
}

func (x *NackReq) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

// Extend lease request
type ExtendReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic      string               `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	LeaseToken string               `protobuf:"bytes,2,opt,name=lease_token,json=leaseToken,proto3" json:"lease_token,omitempty"`
	Extension  *durationpb.Duration `protobuf:"bytes,3,opt,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ExtendReq) Reset() {
	*x = ExtendReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disheap_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtendReq) ProtoMessage() {}

func (x *ExtendReq) ProtoReflect() protoreflect.Message {
	mi := &file_disheap_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtendReq.ProtoReflect.Descriptor instead.
func (*ExtendReq) Descriptor() ([]byte, []int) {
	return file_disheap_proto_rawDescGZIP(), []int{24}
}

func (x *ExtendReq) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *ExtendReq) GetLeaseToken() string {
	if x != nil {
		return x.LeaseToken
	}
	return ""
}

func (x *ExtendReq) GetExtension() *durationpb.Duration {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Peek request
type PeekReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic       string  `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	PartitionId *uint32 `protobuf:"varint,2,opt,name=partition_id,json=partitionId,proto3,oneof" json:"partition_id,omitempty"`
	Limit       *uint32 `protobuf:"varint,3,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	IncludeDlq  bool    `protobuf:"varint,4,opt,name=include_dlq,json=includeDlq,proto3" json:"include_dlq,omitempty"`
}

func (x *PeekReq) Reset() {
	*x = PeekReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disheap_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeekReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeekReq) ProtoMessage() {}

func (x *PeekReq) ProtoReflect() protoreflect.Message {
	mi := &file_disheap_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeekReq.ProtoReflect.Descriptor instead.
func (*PeekReq) Descriptor() ([]byte, []int) {
	return file_disheap_proto_rawDescGZIP(), []int{25}
}

func (x *PeekReq) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *PeekReq) GetPartitionId() uint32 {
	if x != nil && x.PartitionId != nil {
		return *x.PartitionId
	}
	return 0
}

func (x *PeekReq) GetLimit() uint32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *PeekReq) GetIncludeDlq() bool {
	if x != nil {
		return x.IncludeDlq
	}
	return false
}

// Peek response
type PeekResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items   []*PeekItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	HasMore bool        `protobuf:"varint,2,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
}

func (x *PeekResp) Reset() {
	*x = PeekResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disheap_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeekResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeekResp) ProtoMessage() {}

func (x *PeekResp) ProtoReflect() protoreflect.Message {
	mi := &file_disheap_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeekResp.ProtoReflect.Descriptor instead.
func (*PeekResp) Descriptor() ([]byte, []int) {
	return file_disheap_proto_rawDescGZIP(), []int{26}
}

func (x *PeekResp) GetItems() []*PeekItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *PeekResp) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

// Peek item (non-leased view of message)
type PeekItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageId     string                 `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	Topic         string                 `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	PartitionId   uint32                 `protobuf:"varint,3,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
	Payload       []byte                 `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
	Priority      int64                  `protobuf:"varint,5,opt,name=priority,proto3" json:"priority,omitempty"`
	EnqueuedTime  *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=enqueued_time,json=enqueuedTime,proto3" json:"enqueued_time,omitempty"`
	Attempts      uint32                 `protobuf:"varint,7,opt,name=attempts,proto3" json:"attempts,omitempty"`
	MaxRetries    uint32                 `protobuf:"varint,8,opt,name=max_retries,json=maxRetries,proto3" json:"max_retries,omitempty"`
	IsLeased      bool                   `protobuf:"varint,9,opt,name=is_leased,json=isLeased,proto3" json:"is_leased,omitempty"`
	LeaseDeadline *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=lease_deadline,json=leaseDeadline,proto3,oneof" json:"lease_deadline,omitempty"`
	InDlq         bool                   `protobuf:"varint,11,opt,name=in_dlq,json=inDlq,proto3" json:"in_dlq,omitempty"`
	ProducerId    *string                `protobuf:"bytes,12,opt,name=producer_id,json=producerId,proto3,oneof" json:"producer_id,omitempty"`
	Epoch         *uint64                `protobuf:"varint,13,opt,name=epoch,proto3,oneof" json:"epoch,omitempty"`
	Sequence      *uint64                `protobuf:"varint,14,opt,name=sequence,proto3,oneof" json:"sequence,omitempty"`
}

func (x *PeekItem) Reset() {
	*x = PeekItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disheap_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeekItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeekItem) ProtoMessage() {}

func (x *PeekItem) ProtoReflect() protoreflect.Message {
	mi := &file_disheap_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeekItem.ProtoReflect.Descriptor instead.
func (*PeekItem) Descriptor() ([]byte, []int) {
	return file_disheap_proto_rawDescGZIP(), []int{27}
}

func (x *PeekItem) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *PeekItem) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *PeekItem) GetPartitionId() uint32 {
	if x != nil {
		return x.PartitionId
	}
	return 0
}

func (x *PeekItem) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *PeekItem) GetPriority() int64 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *PeekItem) GetEnqueuedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EnqueuedTime
	}
	return nil
}

func (x *PeekItem) GetAttempts() uint32 {
	if x != nil {
		return x.Attempts
	}
	return 0
}

func (x *PeekItem) GetMaxRetries() uint32 {
	if x != nil {
		return x.MaxRetries
	}
	return 0
}

func (x *PeekItem) GetIsLeased() bool {
	if x != nil {
		return x.IsLeased
	}
	return false
}

func (x *PeekItem) GetLeaseDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.LeaseDeadline
	}
	return nil
}

func (x *PeekItem) GetInDlq() bool {
	if x != nil {
		return x.InDlq
	}
	return false
}

func (x *PeekItem) GetProducerId() string {
	if x != nil && x.ProducerId != nil {
		return *x.ProducerId
	}
	return ""
}

func (x *PeekItem) GetEpoch() uint64 {
	if x != nil && x.Epoch != nil {
		return *x.Epoch
	}
	return 0
}

func (x *PeekItem) GetSequence() uint64 {
	if x != nil && x.Sequence != nil {
		return *x.Sequence
	}
	return 0
}

var File_disheap_proto protoreflect.FileDescriptor

var file_disheap_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x64, 0x69, 0x73, 0x68, 0x65, 0x61, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0a, 0x64, 0x69, 0x73, 0x68, 0x65, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x96, 0x04, 0x0a, 0x0b, 0x4d, 0x61,
	0x6b, 0x65, 0x48, 0x65, 0x61, 0x70, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12,
	0x24, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e,
	0x64, 0x69, 0x73, 0x68, 0x65, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0b, 0x74, 0x6f, 0x70, 0x5f, 0x6b, 0x5f, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x6f, 0x70, 0x4b, 0x42,
	0x6f, 0x75, 0x6e, 0x64, 0x12, 0x40, 0x0a, 0x0e, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x57, 0x0a, 0x1a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x18, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12,
	0x2e, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6d, 0x61,
	0x78, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12,
	0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x63,
	0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x0a,
	0x64, 0x6c, 0x71, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x64, 0x69, 0x73, 0x68, 0x65, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x4c,
	0x51, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x09, 0x64, 0x6c, 0x71, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x22, 0x3d, 0x0a, 0x0c, 0x4d, 0x61, 0x6b, 0x65, 0x48, 0x65, 0x61, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x65, 0x61, 0x70, 0x49,
	0x64, 0x22, 0x6a, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x65, 0x61, 0x70, 0x52,
	0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x2d,
	0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xae, 0x04,
	0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x65, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x45, 0x0a, 0x0e, 0x72,
	0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x0d, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x5c, 0x0a, 0x1a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x01, 0x52, 0x18, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x33, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x5f,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52,
	0x11, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x48, 0x03, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0a,
	0x64, 0x6c, 0x71, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x64, 0x69, 0x73, 0x68, 0x65, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x4c,
	0x51, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48, 0x05, 0x52, 0x09, 0x64, 0x6c, 0x71, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x74, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x76,
	0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6d, 0x61,
	0x78, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x6c, 0x71, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x4a,
	0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x65, 0x61, 0x70, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x63, 0x0a, 0x0d, 0x4c, 0x69,
	0x73, 0x74, 0x48, 0x65, 0x61, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2a, 0x0a, 0x05, 0x68,
	0x65, 0x61, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x69, 0x73,
	0x68, 0x65, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x68, 0x65, 0x61, 0x70, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0xb6, 0x05, 0x0a, 0x08, 0x48, 0x65, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x12, 0x24, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x64, 0x69, 0x73, 0x68, 0x65, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0b, 0x74, 0x6f, 0x70, 0x5f, 0x6b,
	0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x6f,
	0x70, 0x4b, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x40, 0x0a, 0x0e, 0x72, 0x65, 0x74, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x72, 0x65, 0x74, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x57, 0x0a, 0x1a, 0x76, 0x69, 0x73,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x18, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6d,
	0x61, 0x78, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2f,
	0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x63, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x34, 0x0a, 0x0a, 0x64, 0x6c, 0x71, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x69, 0x73, 0x68, 0x65, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x4c, 0x51, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x09, 0x64, 0x6c, 0x71, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2b, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x69, 0x73,
	0x68, 0x65, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x22, 0x67, 0x0a, 0x09, 0x44, 0x4c, 0x51, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x40, 0x0a, 0x0e, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0d, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x87, 0x04, 0x0a, 0x09, 0x48, 0x65, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6e, 0x66, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x10, 0x69, 0x6e, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6c, 0x71, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x64, 0x6c, 0x71, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x65, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x70, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x63, 0x6b, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x73, 0x12, 0x52, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x64, 0x69, 0x73, 0x68, 0x65, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x48,
	0x65, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x1a, 0x5d, 0x0a, 0x13,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x69, 0x73, 0x68, 0x65, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd0, 0x01, 0x0a, 0x0e,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x6e, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x69, 0x6e, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x22, 0x68,
	0x0a, 0x08, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x0b, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0xe3, 0x01, 0x0a, 0x09, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x38, 0x0a, 0x0c, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64,
	0x69, 0x73, 0x68, 0x65, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x0b, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x46, 0x0a, 0x0b, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x69, 0x73, 0x68, 0x65, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x73, 0x1a, 0x54, 0x0a, 0x0f, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64,
	0x69, 0x73, 0x68, 0x65, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9e,
	0x01, 0x0a, 0x08, 0x50, 0x75, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12,
	0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x22,
	0x6b, 0x0a, 0x0c, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x44, 0x6c, 0x71, 0x52, 0x65, 0x71, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xa1, 0x03, 0x0a,
	0x0a, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x28, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x48, 0x03, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0a, 0x6e, 0x6f, 0x74,
	0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x05, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x42,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65,
	0x22, 0x6d, 0x0a, 0x0b, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22,
	0x84, 0x01, 0x0a, 0x0f, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x12, 0x32, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x69, 0x73, 0x68, 0x65, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x71, 0x52, 0x08, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0x97, 0x01, 0x0a, 0x10, 0x45, 0x6e, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x35, 0x0a, 0x09, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x64, 0x69, 0x73, 0x68, 0x65, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6c, 0x6c,
	0x5f, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73,
	0x22, 0x80, 0x01, 0x0a, 0x07, 0x50, 0x6f, 0x70, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x3c, 0x0a, 0x0c,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x69, 0x73, 0x68, 0x65, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x48, 0x00, 0x52, 0x0b, 0x66,
	0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x2f, 0x0a, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x69, 0x73,
	0x68, 0x65, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x22, 0x27, 0x0a, 0x0b, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x22, 0xac, 0x01, 0x0a,
	0x09, 0x50, 0x6f, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x4d, 0x0a, 0x12, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11,
	0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x88, 0x01, 0x01, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x82, 0x04, 0x0a, 0x07,
	0x50, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x3f, 0x0a, 0x0d, 0x65, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x65, 0x6e, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x41, 0x0a, 0x0e, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x5f, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x74,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x74,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x61, 0x78,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x05,
	0x65, 0x70, 0x6f, 0x63, 0x68, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02, 0x52, 0x08, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x22, 0x5e, 0x0a, 0x06, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0xe7, 0x01, 0x0a, 0x07, 0x4e, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x49, 0x0a, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x5f, 0x6f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x6f,
	0x66, 0x66, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x62,
	0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x7b, 0x0a, 0x09, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x1f, 0x0a,
	0x0b, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x37,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x9e, 0x01, 0x0a, 0x07, 0x50, 0x65, 0x65, 0x6b,
	0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x00, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x01, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x64, 0x6c, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x44, 0x6c, 0x71, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x51, 0x0a, 0x08, 0x50, 0x65, 0x65, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x2a, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x69, 0x73, 0x68, 0x65, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x65, 0x65, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x12, 0x19, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x22, 0xae, 0x04, 0x0a, 0x08,
	0x50, 0x65, 0x65, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x3f, 0x0a, 0x0d, 0x65, 0x6e, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x65, 0x6e, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4c, 0x65, 0x61, 0x73, 0x65,
	0x64, 0x12, 0x46, 0x0a, 0x0e, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0d, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x65,
	0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x6e, 0x5f,
	0x64, 0x6c, 0x71, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x6e, 0x44, 0x6c, 0x71,
	0x12, 0x24, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x04, 0x48, 0x03, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x65, 0x61,
	0x64, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x2a, 0x18, 0x0a, 0x04,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a,
	0x03, 0x4d, 0x41, 0x58, 0x10, 0x01, 0x32, 0xda, 0x06, 0x0a, 0x07, 0x44, 0x69, 0x73, 0x68, 0x65,
	0x61, 0x70, 0x12, 0x3d, 0x0a, 0x08, 0x4d, 0x61, 0x6b, 0x65, 0x48, 0x65, 0x61, 0x70, 0x12, 0x17,
	0x2e, 0x64, 0x69, 0x73, 0x68, 0x65, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6b, 0x65,
	0x48, 0x65, 0x61, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x64, 0x69, 0x73, 0x68, 0x65, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6b, 0x65, 0x48, 0x65, 0x61, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x3f, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x65, 0x61, 0x70, 0x12,
	0x19, 0x2e, 0x64, 0x69, 0x73, 0x68, 0x65, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x48, 0x65, 0x61, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x4b, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x65, 0x61, 0x70,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x2e, 0x64, 0x69, 0x73, 0x68, 0x65, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x65, 0x61, 0x70, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x40, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x65, 0x61, 0x70, 0x73, 0x12, 0x18, 0x2e, 0x64,
	0x69, 0x73, 0x68, 0x65, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x65,
	0x61, 0x70, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x64, 0x69, 0x73, 0x68, 0x65, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x65, 0x61, 0x70, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x34, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x14, 0x2e, 0x64, 0x69, 0x73,
	0x68, 0x65, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x1a, 0x15, 0x2e, 0x64, 0x69, 0x73, 0x68, 0x65, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x35, 0x0a, 0x05, 0x50, 0x75, 0x72, 0x67, 0x65,
	0x12, 0x14, 0x2e, 0x64, 0x69, 0x73, 0x68, 0x65, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75,
	0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3d,
	0x0a, 0x09, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x44, 0x4c, 0x51, 0x12, 0x18, 0x2e, 0x64, 0x69,
	0x73, 0x68, 0x65, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x44,
	0x6c, 0x71, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3a, 0x0a,
	0x07, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x16, 0x2e, 0x64, 0x69, 0x73, 0x68, 0x65,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x17, 0x2e, 0x64, 0x69, 0x73, 0x68, 0x65, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x49, 0x0a, 0x0c, 0x45, 0x6e, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1b, 0x2e, 0x64, 0x69, 0x73, 0x68,
	0x65, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x64, 0x69, 0x73, 0x68, 0x65, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x09, 0x50, 0x6f, 0x70, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x12, 0x13, 0x2e, 0x64, 0x69, 0x73, 0x68, 0x65, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6f, 0x70, 0x4f, 0x70, 0x65, 0x6e, 0x1a, 0x13, 0x2e, 0x64, 0x69, 0x73, 0x68, 0x65, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x28, 0x01, 0x30, 0x01, 0x12,
	0x31, 0x0a, 0x03, 0x41, 0x63, 0x6b, 0x12, 0x12, 0x2e, 0x64, 0x69, 0x73, 0x68, 0x65, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x33, 0x0a, 0x04, 0x4e, 0x61, 0x63, 0x6b, 0x12, 0x13, 0x2e, 0x64, 0x69, 0x73,
	0x68, 0x65, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x06, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x64, 0x12, 0x15, 0x2e, 0x64, 0x69, 0x73, 0x68, 0x65, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x31, 0x0a, 0x04, 0x50, 0x65, 0x65, 0x6b, 0x12, 0x13, 0x2e, 0x64, 0x69, 0x73, 0x68, 0x65,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x65, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e,
	0x64, 0x69, 0x73, 0x68, 0x65, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x65, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x42, 0x37, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x64, 0x69, 0x73, 0x68, 0x65, 0x61, 0x70, 0x2f, 0x64, 0x69, 0x73, 0x68, 0x65, 0x61,
	0x70, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x69, 0x73, 0x68, 0x65, 0x61, 0x70, 0x2f,
	0x76, 0x31, 0x3b, 0x64, 0x69, 0x73, 0x68, 0x65, 0x61, 0x70, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_disheap_proto_rawDescOnce sync.Once
	file_disheap_proto_rawDescData = file_disheap_proto_rawDesc
)

func file_disheap_proto_rawDescGZIP() []byte {
	file_disheap_proto_rawDescOnce.Do(func() {
		file_disheap_proto_rawDescData = protoimpl.X.CompressGZIP(file_disheap_proto_rawDescData)
	})
	return file_disheap_proto_rawDescData
}

var file_disheap_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_disheap_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_disheap_proto_goTypes = []interface{}{
	(Mode)(0),                     // 0: disheap.v1.Mode
	(*MakeHeapReq)(nil),           // 1: disheap.v1.MakeHeapReq
	(*MakeHeapResp)(nil),          // 2: disheap.v1.MakeHeapResp
	(*DeleteHeapReq)(nil),         // 3: disheap.v1.DeleteHeapReq
	(*UpdateHeapConfigReq)(nil),   // 4: disheap.v1.UpdateHeapConfigReq
	(*ListHeapsReq)(nil),          // 5: disheap.v1.ListHeapsReq
	(*ListHeapsResp)(nil),         // 6: disheap.v1.ListHeapsResp
	(*HeapInfo)(nil),              // 7: disheap.v1.HeapInfo
	(*DLQPolicy)(nil),             // 8: disheap.v1.DLQPolicy
	(*HeapStats)(nil),             // 9: disheap.v1.HeapStats
	(*PartitionStats)(nil),        // 10: disheap.v1.PartitionStats
	(*StatsReq)(nil),              // 11: disheap.v1.StatsReq
	(*StatsResp)(nil),             // 12: disheap.v1.StatsResp
	(*PurgeReq)(nil),              // 13: disheap.v1.PurgeReq
	(*MoveToDlqReq)(nil),          // 14: disheap.v1.MoveToDlqReq
	(*EnqueueReq)(nil),            // 15: disheap.v1.EnqueueReq
	(*EnqueueResp)(nil),           // 16: disheap.v1.EnqueueResp
	(*EnqueueBatchReq)(nil),       // 17: disheap.v1.EnqueueBatchReq
	(*EnqueueBatchResp)(nil),      // 18: disheap.v1.EnqueueBatchResp
	(*PopOpen)(nil),               // 19: disheap.v1.PopOpen
	(*FlowControl)(nil),           // 20: disheap.v1.FlowControl
	(*PopFilter)(nil),             // 21: disheap.v1.PopFilter
	(*PopItem)(nil),               // 22: disheap.v1.PopItem
	(*AckReq)(nil),                // 23: disheap.v1.AckReq
	(*NackReq)(nil),               // 24: disheap.v1.NackReq
	(*ExtendReq)(nil),             // 25: disheap.v1.ExtendReq
	(*PeekReq)(nil),               // 26: disheap.v1.PeekReq
	(*PeekResp)(nil),              // 27: disheap.v1.PeekResp
	(*PeekItem)(nil),              // 28: disheap.v1.PeekItem
	nil,                           // 29: disheap.v1.HeapStats.PartitionStatsEntry
	nil,                           // 30: disheap.v1.StatsResp.TopicStatsEntry
	(*durationpb.Duration)(nil),   // 31: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil), // 32: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),         // 33: google.protobuf.Empty
}
var file_disheap_proto_depIdxs = []int32{
	0,  // 0: disheap.v1.MakeHeapReq.mode:type_name -> disheap.v1.Mode
	31, // 1: disheap.v1.MakeHeapReq.retention_time:type_name -> google.protobuf.Duration
	31, // 2: disheap.v1.MakeHeapReq.visibility_timeout_default:type_name -> google.protobuf.Duration
	8,  // 3: disheap.v1.MakeHeapReq.dlq_policy:type_name -> disheap.v1.DLQPolicy
	31, // 4: disheap.v1.UpdateHeapConfigReq.retention_time:type_name -> google.protobuf.Duration
	31, // 5: disheap.v1.UpdateHeapConfigReq.visibility_timeout_default:type_name -> google.protobuf.Duration
	8,  // 6: disheap.v1.UpdateHeapConfigReq.dlq_policy:type_name -> disheap.v1.DLQPolicy
	7,  // 7: disheap.v1.ListHeapsResp.heaps:type_name -> disheap.v1.HeapInfo
	0,  // 8: disheap.v1.HeapInfo.mode:type_name -> disheap.v1.Mode
	31, // 9: disheap.v1.HeapInfo.retention_time:type_name -> google.protobuf.Duration
	31, // 10: disheap.v1.HeapInfo.visibility_timeout_default:type_name -> google.protobuf.Duration
	8,  // 11: disheap.v1.HeapInfo.dlq_policy:type_name -> disheap.v1.DLQPolicy
	32, // 12: disheap.v1.HeapInfo.created_at:type_name -> google.protobuf.Timestamp
	32, // 13: disheap.v1.HeapInfo.updated_at:type_name -> google.protobuf.Timestamp
	9,  // 14: disheap.v1.HeapInfo.stats:type_name -> disheap.v1.HeapStats
	31, // 15: disheap.v1.DLQPolicy.retention_time:type_name -> google.protobuf.Duration
	29, // 16: disheap.v1.HeapStats.partition_stats:type_name -> disheap.v1.HeapStats.PartitionStatsEntry
	9,  // 17: disheap.v1.StatsResp.global_stats:type_name -> disheap.v1.HeapStats
	30, // 18: disheap.v1.StatsResp.topic_stats:type_name -> disheap.v1.StatsResp.TopicStatsEntry
	31, // 19: disheap.v1.EnqueueReq.not_before:type_name -> google.protobuf.Duration
	15, // 20: disheap.v1.EnqueueBatchReq.requests:type_name -> disheap.v1.EnqueueReq
	16, // 21: disheap.v1.EnqueueBatchResp.responses:type_name -> disheap.v1.EnqueueResp
	20, // 22: disheap.v1.PopOpen.flow_control:type_name -> disheap.v1.FlowControl
	21, // 23: disheap.v1.PopOpen.filter:type_name -> disheap.v1.PopFilter
	31, // 24: disheap.v1.PopFilter.visibility_timeout:type_name -> google.protobuf.Duration
	32, // 25: disheap.v1.PopItem.enqueued_time:type_name -> google.protobuf.Timestamp
	32, // 26: disheap.v1.PopItem.lease_deadline:type_name -> google.protobuf.Timestamp
	31, // 27: disheap.v1.NackReq.backoff_override:type_name -> google.protobuf.Duration
	31, // 28: disheap.v1.ExtendReq.extension:type_name -> google.protobuf.Duration
	28, // 29: disheap.v1.PeekResp.items:type_name -> disheap.v1.PeekItem
	32, // 30: disheap.v1.PeekItem.enqueued_time:type_name -> google.protobuf.Timestamp
	32, // 31: disheap.v1.PeekItem.lease_deadline:type_name -> google.protobuf.Timestamp
	10, // 32: disheap.v1.HeapStats.PartitionStatsEntry.value:type_name -> disheap.v1.PartitionStats
	9,  // 33: disheap.v1.StatsResp.TopicStatsEntry.value:type_name -> disheap.v1.HeapStats
	1,  // 34: disheap.v1.Disheap.MakeHeap:input_type -> disheap.v1.MakeHeapReq
	3,  // 35: disheap.v1.Disheap.DeleteHeap:input_type -> disheap.v1.DeleteHeapReq
	4,  // 36: disheap.v1.Disheap.UpdateHeapConfig:input_type -> disheap.v1.UpdateHeapConfigReq
	5,  // 37: disheap.v1.Disheap.ListHeaps:input_type -> disheap.v1.ListHeapsReq
	11, // 38: disheap.v1.Disheap.Stats:input_type -> disheap.v1.StatsReq
	13, // 39: disheap.v1.Disheap.Purge:input_type -> disheap.v1.PurgeReq
	14, // 40: disheap.v1.Disheap.MoveToDLQ:input_type -> disheap.v1.MoveToDlqReq
	15, // 41: disheap.v1.Disheap.Enqueue:input_type -> disheap.v1.EnqueueReq
	17, // 42: disheap.v1.Disheap.EnqueueBatch:input_type -> disheap.v1.EnqueueBatchReq
	19, // 43: disheap.v1.Disheap.PopStream:input_type -> disheap.v1.PopOpen
	23, // 44: disheap.v1.Disheap.Ack:input_type -> disheap.v1.AckReq
	24, // 45: disheap.v1.Disheap.Nack:input_type -> disheap.v1.NackReq
	25, // 46: disheap.v1.Disheap.Extend:input_type -> disheap.v1.ExtendReq
	26, // 47: disheap.v1.Disheap.Peek:input_type -> disheap.v1.PeekReq
	2,  // 48: disheap.v1.Disheap.MakeHeap:output_type -> disheap.v1.MakeHeapResp
	33, // 49: disheap.v1.Disheap.DeleteHeap:output_type -> google.protobuf.Empty
	33, // 50: disheap.v1.Disheap.UpdateHeapConfig:output_type -> google.protobuf.Empty
	6,  // 51: disheap.v1.Disheap.ListHeaps:output_type -> disheap.v1.ListHeapsResp
	12, // 52: disheap.v1.Disheap.Stats:output_type -> disheap.v1.StatsResp
	33, // 53: disheap.v1.Disheap.Purge:output_type -> google.protobuf.Empty
	33, // 54: disheap.v1.Disheap.MoveToDLQ:output_type -> google.protobuf.Empty
	16, // 55: disheap.v1.Disheap.Enqueue:output_type -> disheap.v1.EnqueueResp
	18, // 56: disheap.v1.Disheap.EnqueueBatch:output_type -> disheap.v1.EnqueueBatchResp
	22, // 57: disheap.v1.Disheap.PopStream:output_type -> disheap.v1.PopItem
	33, // 58: disheap.v1.Disheap.Ack:output_type -> google.protobuf.Empty
	33, // 59: disheap.v1.Disheap.Nack:output_type -> google.protobuf.Empty
	33, // 60: disheap.v1.Disheap.Extend:output_type -> google.protobuf.Empty
	27, // 61: disheap.v1.Disheap.Peek:output_type -> disheap.v1.PeekResp
	48, // [48:62] is the sub-list for method output_type
	34, // [34:48] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_disheap_proto_init() }
func file_disheap_proto_init() {
	if File_disheap_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_disheap_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MakeHeapReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disheap_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MakeHeapResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disheap_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteHeapReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disheap_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHeapConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disheap_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListHeapsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disheap_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListHeapsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disheap_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeapInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disheap_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DLQPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disheap_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeapStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disheap_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disheap_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disheap_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disheap_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PurgeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disheap_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveToDlqReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disheap_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnqueueReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disheap_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnqueueResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disheap_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnqueueBatchReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disheap_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnqueueBatchResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disheap_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PopOpen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disheap_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowControl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disheap_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PopFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disheap_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PopItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disheap_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AckReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disheap_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NackReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disheap_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtendReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disheap_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeekReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disheap_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeekResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disheap_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeekItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_disheap_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_disheap_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_disheap_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_disheap_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_disheap_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_disheap_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_disheap_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*PopOpen_FlowControl)(nil),
		(*PopOpen_Filter)(nil),
	}
	file_disheap_proto_msgTypes[20].OneofWrappers = []interface{}{}
	file_disheap_proto_msgTypes[21].OneofWrappers = []interface{}{}
	file_disheap_proto_msgTypes[23].OneofWrappers = []interface{}{}
	file_disheap_proto_msgTypes[25].OneofWrappers = []interface{}{}
	file_disheap_proto_msgTypes[27].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_disheap_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_disheap_proto_goTypes,
		DependencyIndexes: file_disheap_proto_depIdxs,
		EnumInfos:         file_disheap_proto_enumTypes,
		MessageInfos:      file_disheap_proto_msgTypes,
	}.Build()
	File_disheap_proto = out.File
	file_disheap_proto_rawDesc = nil
	file_disheap_proto_goTypes = nil
	file_disheap_proto_depIdxs = nil
}
