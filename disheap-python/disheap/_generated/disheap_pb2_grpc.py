# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import disheap_pb2 as disheap__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in disheap_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class DisheapStub(object):
    """Main Disheap service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.MakeHeap = channel.unary_unary(
                '/disheap.v1.Disheap/MakeHeap',
                request_serializer=disheap__pb2.MakeHeapReq.SerializeToString,
                response_deserializer=disheap__pb2.MakeHeapResp.FromString,
                _registered_method=True)
        self.DeleteHeap = channel.unary_unary(
                '/disheap.v1.Disheap/DeleteHeap',
                request_serializer=disheap__pb2.DeleteHeapReq.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.UpdateHeapConfig = channel.unary_unary(
                '/disheap.v1.Disheap/UpdateHeapConfig',
                request_serializer=disheap__pb2.UpdateHeapConfigReq.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.ListHeaps = channel.unary_unary(
                '/disheap.v1.Disheap/ListHeaps',
                request_serializer=disheap__pb2.ListHeapsReq.SerializeToString,
                response_deserializer=disheap__pb2.ListHeapsResp.FromString,
                _registered_method=True)
        self.Stats = channel.unary_unary(
                '/disheap.v1.Disheap/Stats',
                request_serializer=disheap__pb2.StatsReq.SerializeToString,
                response_deserializer=disheap__pb2.StatsResp.FromString,
                _registered_method=True)
        self.Purge = channel.unary_unary(
                '/disheap.v1.Disheap/Purge',
                request_serializer=disheap__pb2.PurgeReq.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.MoveToDLQ = channel.unary_unary(
                '/disheap.v1.Disheap/MoveToDLQ',
                request_serializer=disheap__pb2.MoveToDlqReq.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.Enqueue = channel.unary_unary(
                '/disheap.v1.Disheap/Enqueue',
                request_serializer=disheap__pb2.EnqueueReq.SerializeToString,
                response_deserializer=disheap__pb2.EnqueueResp.FromString,
                _registered_method=True)
        self.EnqueueBatch = channel.unary_unary(
                '/disheap.v1.Disheap/EnqueueBatch',
                request_serializer=disheap__pb2.EnqueueBatchReq.SerializeToString,
                response_deserializer=disheap__pb2.EnqueueBatchResp.FromString,
                _registered_method=True)
        self.PopStream = channel.stream_stream(
                '/disheap.v1.Disheap/PopStream',
                request_serializer=disheap__pb2.PopOpen.SerializeToString,
                response_deserializer=disheap__pb2.PopItem.FromString,
                _registered_method=True)
        self.Ack = channel.unary_unary(
                '/disheap.v1.Disheap/Ack',
                request_serializer=disheap__pb2.AckReq.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.Nack = channel.unary_unary(
                '/disheap.v1.Disheap/Nack',
                request_serializer=disheap__pb2.NackReq.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.Extend = channel.unary_unary(
                '/disheap.v1.Disheap/Extend',
                request_serializer=disheap__pb2.ExtendReq.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.Peek = channel.unary_unary(
                '/disheap.v1.Disheap/Peek',
                request_serializer=disheap__pb2.PeekReq.SerializeToString,
                response_deserializer=disheap__pb2.PeekResp.FromString,
                _registered_method=True)


class DisheapServicer(object):
    """Main Disheap service
    """

    def MakeHeap(self, request, context):
        """Admin operations
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteHeap(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateHeapConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListHeaps(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Stats(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Purge(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MoveToDLQ(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Enqueue(self, request, context):
        """Data operations
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EnqueueBatch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PopStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Ack(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Nack(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Extend(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Peek(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DisheapServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'MakeHeap': grpc.unary_unary_rpc_method_handler(
                    servicer.MakeHeap,
                    request_deserializer=disheap__pb2.MakeHeapReq.FromString,
                    response_serializer=disheap__pb2.MakeHeapResp.SerializeToString,
            ),
            'DeleteHeap': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteHeap,
                    request_deserializer=disheap__pb2.DeleteHeapReq.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'UpdateHeapConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateHeapConfig,
                    request_deserializer=disheap__pb2.UpdateHeapConfigReq.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'ListHeaps': grpc.unary_unary_rpc_method_handler(
                    servicer.ListHeaps,
                    request_deserializer=disheap__pb2.ListHeapsReq.FromString,
                    response_serializer=disheap__pb2.ListHeapsResp.SerializeToString,
            ),
            'Stats': grpc.unary_unary_rpc_method_handler(
                    servicer.Stats,
                    request_deserializer=disheap__pb2.StatsReq.FromString,
                    response_serializer=disheap__pb2.StatsResp.SerializeToString,
            ),
            'Purge': grpc.unary_unary_rpc_method_handler(
                    servicer.Purge,
                    request_deserializer=disheap__pb2.PurgeReq.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'MoveToDLQ': grpc.unary_unary_rpc_method_handler(
                    servicer.MoveToDLQ,
                    request_deserializer=disheap__pb2.MoveToDlqReq.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'Enqueue': grpc.unary_unary_rpc_method_handler(
                    servicer.Enqueue,
                    request_deserializer=disheap__pb2.EnqueueReq.FromString,
                    response_serializer=disheap__pb2.EnqueueResp.SerializeToString,
            ),
            'EnqueueBatch': grpc.unary_unary_rpc_method_handler(
                    servicer.EnqueueBatch,
                    request_deserializer=disheap__pb2.EnqueueBatchReq.FromString,
                    response_serializer=disheap__pb2.EnqueueBatchResp.SerializeToString,
            ),
            'PopStream': grpc.stream_stream_rpc_method_handler(
                    servicer.PopStream,
                    request_deserializer=disheap__pb2.PopOpen.FromString,
                    response_serializer=disheap__pb2.PopItem.SerializeToString,
            ),
            'Ack': grpc.unary_unary_rpc_method_handler(
                    servicer.Ack,
                    request_deserializer=disheap__pb2.AckReq.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'Nack': grpc.unary_unary_rpc_method_handler(
                    servicer.Nack,
                    request_deserializer=disheap__pb2.NackReq.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'Extend': grpc.unary_unary_rpc_method_handler(
                    servicer.Extend,
                    request_deserializer=disheap__pb2.ExtendReq.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'Peek': grpc.unary_unary_rpc_method_handler(
                    servicer.Peek,
                    request_deserializer=disheap__pb2.PeekReq.FromString,
                    response_serializer=disheap__pb2.PeekResp.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'disheap.v1.Disheap', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('disheap.v1.Disheap', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Disheap(object):
    """Main Disheap service
    """

    @staticmethod
    def MakeHeap(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/disheap.v1.Disheap/MakeHeap',
            disheap__pb2.MakeHeapReq.SerializeToString,
            disheap__pb2.MakeHeapResp.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteHeap(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/disheap.v1.Disheap/DeleteHeap',
            disheap__pb2.DeleteHeapReq.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateHeapConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/disheap.v1.Disheap/UpdateHeapConfig',
            disheap__pb2.UpdateHeapConfigReq.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListHeaps(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/disheap.v1.Disheap/ListHeaps',
            disheap__pb2.ListHeapsReq.SerializeToString,
            disheap__pb2.ListHeapsResp.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Stats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/disheap.v1.Disheap/Stats',
            disheap__pb2.StatsReq.SerializeToString,
            disheap__pb2.StatsResp.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Purge(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/disheap.v1.Disheap/Purge',
            disheap__pb2.PurgeReq.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def MoveToDLQ(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/disheap.v1.Disheap/MoveToDLQ',
            disheap__pb2.MoveToDlqReq.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Enqueue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/disheap.v1.Disheap/Enqueue',
            disheap__pb2.EnqueueReq.SerializeToString,
            disheap__pb2.EnqueueResp.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def EnqueueBatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/disheap.v1.Disheap/EnqueueBatch',
            disheap__pb2.EnqueueBatchReq.SerializeToString,
            disheap__pb2.EnqueueBatchResp.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PopStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/disheap.v1.Disheap/PopStream',
            disheap__pb2.PopOpen.SerializeToString,
            disheap__pb2.PopItem.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Ack(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/disheap.v1.Disheap/Ack',
            disheap__pb2.AckReq.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Nack(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/disheap.v1.Disheap/Nack',
            disheap__pb2.NackReq.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Extend(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/disheap.v1.Disheap/Extend',
            disheap__pb2.ExtendReq.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Peek(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/disheap.v1.Disheap/Peek',
            disheap__pb2.PeekReq.SerializeToString,
            disheap__pb2.PeekResp.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
